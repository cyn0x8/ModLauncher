import flixel.FlxG;
import flixel.addons.display.FlxBackdrop;
import flixel.group.FlxTypedSpriteGroup;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;
import flixel.util.FlxTimer;

import Main;

import funkin.Paths;
import funkin.PlayerSettings;
import funkin.audio.FunkinSound;
import funkin.graphics.FunkinCamera;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.module.ModuleHandler;
import funkin.save.Save;
import funkin.ui.Alphabet;
import funkin.util.MathUtil;

class ModLauncher_State extends ScriptedMusicBeatState {
	private var ambience:FunkinSound;
	private var music:FunkinSound;
	
	public var cam_ui:FunkinCamera;
	private var bg_overlay:FlxBackdrop;
	private var logos:FlxTypedSpriteGroup;
	private var header:Alphabet;
	
	private var input:Bool = true;
	private var selected:Int = 0;
	private var binds:Array<Dynamic>;
	
	public function new() {
		super();
		
		persistentUpdate = true;
	}
	
	public function create():Void {
		super.create();
		
		Save.instance.modOptions.get("ModLauncher").selected_mod = "";
		
		ambience = FunkinSound.load(Paths.sound("ModLauncher/ambience"), 0, true, true, true);
		ambience.fadeIn(0.75);
		ambience.persist = false;
		
		music = FunkinSound.load(Paths.sound("ModLauncher/music_" + Std.string(FlxG.random.int(0, 5))), 0, true, true, true);
		music.fadeIn(0.75);
		music.persist = false;
		
		binds = ModuleHandler.getModule("ModLauncher_Binding").scriptGet("binds");
		
		for (i in 0 ... binds.length) {
			var data:Dynamic = binds[i];
			
			if (data.cam != null) {
				data.cam.destroy();
			}
			
			var cam:FlxCamera = new FunkinCamera("ModLauncher_cam_" + data.name, 0, 0, 1280, 720, 1);
			cam.zoom = 1.25;
			cam.alpha = i == selected ? 1 : 0.0001;
			FlxG.cameras.add(cam, false);
			FlxTween.tween(cam, {zoom: 1}, 1, {ease: FlxEase.expoOut});
			data.cam = cam;
			
			var bg_group:FlxTypedSpriteGroup = data.bg_group;
			
			if (bg_group != null) {
				bg_group.destroy();
			}
			
			bg_group = new FlxTypedSpriteGroup();
			data.bg_group = bg_group;
			
			bg_group.cameras = [cam];
			add(bg_group);
		}
		
		cam_ui = new FunkinCamera("ModLauncher_cam_ui", 0, 0, 1280, 720, 1);
		cam_ui.bgColor = 0x00000000;
		cam_ui.zoom = 1.25;
		FlxG.cameras.add(cam_ui, true);
		FlxTween.tween(cam_ui, {zoom: 1}, 1.25, {ease: FlxEase.expoOut});
		
		bg_overlay = new FlxBackdrop().makeGraphic(1280, 720, 0xff000000);
		bg_overlay.scrollFactor.set(0, 0);
		bg_overlay.cameras = [cam_ui];
		bg_overlay.alpha = 0.0001;
		add(bg_overlay);
		
		logos = new FlxTypedSpriteGroup();
		
		for (i in 0 ... binds.length) {
			var data:Dynamic = binds[i];
			
			if (data.logo != null) {
				data.logo.destroy();
			}
			
			var logo = new FunkinSprite().loadTexture(data.logo_path);
			if (logo.frameWidth == 0 || logo.frameHeight == 0) {
				logo = new FunkinSprite().makeGraphic(1, 1, 0xffffffff);
			}
			
			var scale:Float = (720 / logo.frameHeight) * 0.5;
			logo.updateHitbox();
			logo.screenCenter();
			logo.y += i * 720;
			
			data.logo_scale = scale;
			
			scale *= i == selected ? 1 : 0.75;
			logo.scale.set(scale, scale);
			
			logo.cameras = [cam_ui];
			logos.add(logo);
			
			data.logo = logo;
			
			if (data.on_setup != null) {
				data.on_setup(data);
			}
		}
		
		add(logos);
		
		var first:Dynamic = binds[0];
		FlxTween.globalManager.cancelTweensOf(first.logo.scale, ["x", "y"]);
		first.logo.scale.set(first.logo_scale + 0.5, first.logo_scale + 0.5);
		FlxTween.tween(first.logo.scale, {x: first.logo_scale, y: first.logo_scale}, 1, {ease: FlxEase.expoOut});
		
		var text_scale:Float = 0.5;
		header = new Alphabet(0, 15, "title select", true, false);
		header.scale.set(text_scale, text_scale);
		
		for (member in header.members) {
			member.x *= text_scale;
			member.y *= text_scale;
		}
		
		header.screenCenter(0x01); // X
		header.scrollFactor.set(0, 0);
		header.antialiasing = true;
		header.cameras = [cam_ui];
		add(header);
		
		if (binds.length <= 1) {
			FlxG.switchState(ScriptedMusicBeatState.init(first.target));
			FlxG.sound.music = null;
		}
	}
	
	private function increment(dir:Int):Void {
		FunkinSound.playOnce(Paths.sound("scrollMenu"), 0.75);
		
		var data:Dynamic = binds[selected];
		
		FlxTween.globalManager.cancelTweensOf(data.logo.scale, ["x", "y"]);
		FlxTween.tween(data.logo.scale, {x: data.logo_scale * (2 / 3), y: data.logo_scale * (2 / 3)}, 1, {ease: FlxEase.expoOut});
		
		if (selected.on_defocus != null) {
			selected.on_defocus(data);
		}
		
		selected = (selected + dir + binds.length) % binds.length;
		data = binds[selected];
		
		FlxTween.globalManager.cancelTweensOf(data.logo.scale, ["x", "y"]);
		FlxTween.tween(data.logo.scale, {x: data.logo_scale, y: data.logo_scale}, 1, {ease: FlxEase.expoOut});
		
		FlxTween.globalManager.cancelTweensOf(bg_overlay, ["alpha"]);
		bg_overlay.alpha = 0.0001;
		FlxTween.tween(bg_overlay, {alpha: 1}, 0.25, {ease: FlxEase.quadIn, onComplete: (tween:FlxTween) -> {
			if (data.on_focus != null) {
				data.on_focus(data);
			}
			
			for (i in 0 ... binds.length) {
				binds[i].cam.alpha = i == selected ? 1 : 0.0001;
			}
			
			bg_overlay.alpha = 1;
			FlxTween.tween(bg_overlay, {alpha: 0.0001}, 0.25, {ease: FlxEase.quadOut});
		}});
	}
	
	public override function update(elapsed:Float):Void {
		super.update(elapsed);
		
		if (input) {
			if (FlxG.keys.justPressed.TAB && ModuleHandler.getModule("BootStrapBinds") != null) {
				ambience.stop();
				ambience.destroy();
				
				music.stop();
				music.destroy();
				
				FlxG.switchState(ScriptedMusicBeatState.init("BootStrapState"));
			} else if (PlayerSettings.player1.controls.ACCEPT) {
				input = false;
				
				FunkinSound.playOnce(Paths.sound("confirmMenu"), 0.75);
				
				ambience.fadeOut(1, 0, (tween:FlxTween) -> {
					ambience.stop();
					ambience.destroy();
					
					tween.destroy();
				});
				
				music.fadeOut(1, 0, (tween:FlxTween) -> {
					music.stop();
					music.destroy();
					
					tween.destroy();
				});
				
				FlxTween.tween(cam_ui, {zoom: 1.15}, 2, {ease: FlxEase.expoOut});
				
				FlxTween.tween(header, {y: -50}, 1, {ease: FlxEase.cubeOut});
				
				for (i in 0 ... binds.length) {
					FlxTween.tween(binds[i].cam, {zoom: 1.075}, 2, {ease: FlxEase.expoOut});
				}
				
				var data:Dynamic = binds[selected];
				
				FlxTween.globalManager.cancelTweensOf(data.logo.scale, ["x", "y"]);
				data.logo.scale.set(data.logo_scale * 0.9, data.logo_scale * 0.9);
				FlxTween.tween(data.logo.scale, {x: data.logo_scale, y: data.logo_scale}, 2, {ease: FlxEase.circOut});
				
				new FlxTimer().start(1, () -> {
					transitionOut(() -> {
						for (logo in logos.members) {
							logo.alpha = 0.0001;
						}
						
						header.alpha = 0.0001;
						
						cam_ui.bgColor = 0xff000000;
						
						new FlxTimer().start(0.5, () -> {
							Save.instance.modOptions.get("ModLauncher").selected_mod = data.name;
							
							if (data.on_init != null) {
								data.on_init(data);
							}
							
							FlxG.switchState(ScriptedMusicBeatState.init(data.target));
							FlxG.sound.music = null;
							
							Main.fpsCounter.alpha = 1;
							Main.memoryCounter.alpha = 1;
							
							trace("selected mod \"" + Save.instance.modOptions.get("ModLauncher").selected_mod + "\"");
						});
					});
				});
				
				if (data.on_select != null) {
					data.on_select(data);
				}
			} else if (PlayerSettings.player1.controls.UI_UP_P) {
				increment(-1);
			} else if (PlayerSettings.player1.controls.UI_DOWN_P) {
				increment(1);
			}
		}
		
		cam_ui.scroll.y = MathUtil.lerp(selected * 720, cam_ui.scroll.y, MathUtil.exp2(-elapsed / 0.125));
		
		for (i in 0 ... binds.length) {
			var data:Dynamic = binds[i];
			
			data.cam.scroll.y = cam_ui.scroll.y - i * 720;
			
			if (data.on_update != null) {
				data.on_update(data, elapsed);
			}
		}
		
		Main.fpsCounter.alpha = 0.0001;
		Main.memoryCounter.alpha = 0.0001;
		FlxG.mouse.set_visible(false);
	}
	
	public override function destroy():Void {
		super.destroy();
		
		trace("destroying mod launcher state");
		
		for (i in 0 ... binds.length) {
			var data:Dynamic = binds[i];
			
			if (data.logo != null) {
				data.logo.destroy();
				data.logo = null;
			}
			
			if (data.bg_group != null) {
				data.bg_group.destroy();
				data.bg_group = null;
			}
			
			if (data.cam != null) {
				data.cam.destroy();
				data.cam = null;
			}
		}
	}
}